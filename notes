==================================================
;!TOC

todo
aim
cando
friction
messy notes
  naming
meta
ideas
bugs
c language
man
hunks of text
c runtime
lisp
math
vm
notsure
out
in

==================================================
;TODO


malloc!

come up with a printf?
  state machine 

formats
  %u
  %i
  %q
  %3q
  %b
  %B
  %t
 
pretty printing for indentation
multiline 

rename printing procs?
  pfoo0 - prints "[foo]"
  pfoo prints "[foo]\n"
  how about no?
how about just copying the behavior
was there any other reason for that kind of abstraction?
  "reading char** lines"


memory exploration
  is constant space executable
  call stacks
  structs
    alignment, endianness


write a VM
  so you can do reflection and stuff
  you can get numeric speed outside of VM
how many years of slowdown is a VM
  does it take me back to the 90's?
but bro, you're basically using a setup from before VTs

replicate printing funcitons with printing to string
  s prefix

how about using them as a base for stdout printing funcitons?
  make a hidden function that has a flag
  how to call it
    in terms of ifs
  this kind of abstraction
  what is the cost of such abstraction
    it introduces a branch
  this isn't a big deal for printing to the stdout
    where most time is spent in a syscall
  but when you write to a string
    you have 2 branches instead of 1
      1 for the loop
      1 to determine whether to write to a string
    and you have a function call
    if it's not inlined it causee more delay
how about you make a global function pointer
  and you call it with dummy args if you don't need them
  or with a union
  and each fn interprets the union differently
  or just 2 args
  each fun ignores the arg it doesn't need
    union is better for this
  better to "take what you need" than ignore what you don't

tests 
  after you have s printing thingies

decimal print
unsigned
then signed

dynamic arrays
  so I don't have to fuck with sizes so much
  at(x) 



bonus
bignums

tree editor
  first circular buffer text editor
    do you reall need it?
    can you have small text buffers "
generalization of dynamic arrays
  like js objects
how about enum for all types
  heterogeneous arrays?
  how did tarver call it?
  many types, anyway

how about dynamic wrappers for vars?

  


==================================================
;AIM

Write whatever cool you can write [sic.]

rules:
  only input is terminal in teletype mode
  only output is terminal in teletype mode
  you can only print ASCII characters and new lines
  you can use an editor and a git repo
    but it's a single branch
  no preprocessor directives



==================================================
;CANDO



==================================================
;FRICTION

top of the todo list is meh
  like a sidequest
  how about making a "cando" list
  to keep the todo list clean

==================================================
;MESSY NOTES

what does it mean that the notes are messy?

there's a zillion topics
and I find myself switching focus between them
contributing a little
and getting disracted

why is it a problem?

maybe there are many ways they are messy
and they can be handled separately


========================================
;-NAMING

open

p - p 


==================================================
;META


friction
  has done a part of plan step and started next one
    didn't do decimal printing but started hexdump
      solution - write more granular goals and rearrange
      or maybe a "done?" thing?
      that might be useful
      I never do it like that
      sounds like it would slow me down
      but gotta try sometimes

you can write prereqs top level
if it's confusing what they are for
you can create link a subtask!

you can also try trying to do it eagerly
  you can't leave the todo list without
  linking all the subtasks you can to the top level task

hey, it's a simple algorithm
and you can be flexible with the top level goal
but let's go lazy right now
it's closer to our habitual flow

hey!!!!!!!
you can implement "go to the supertask"


a task can have many supertasks!
  it's many to many
  can extend an editor to link it up like that?
or maybe I can write a tree editor in c!

but I'd have to write in C...
or not, maybe I'll do it outside of this garden
  meta meta - could use a special highlight that it needs to go
  from here

tags over categories!
flat over nested
categories must have a good answer for "why" question

category annotation format
[my schtick]
purpose
attitional data
most important first
simple




==================================================
;IDEAS

it would be nice if I had a "struct display"
  prints field names and their values

fixed point nums
  easier to display

trig functions

can write a calculator

pattern matching, offsets
  finding constants from other constants
  finding a sequence of bytes in another

xxd that skips null rows
  it requires looking forward to work nice 
    I don't want n empty rows unitl it jumps to next block of data

==================================================
;BUGS

bugs:

p('x')

void p(char* s) {
  for (;s!=0;s++) {
    putchar(s); //putchar(*s)
  }
}

  
void p(char* s) {
  for (;s!=0;s++) { //*s != 0
    putchar(*s);
  }
}

would be less bugs if I used arrays
  rly?


a = 1100 >> 3 = 1
1100 - a << 3 = 100
b = 100 >> 2 = 10

how mmany itrs
1 bit  - 1

void pB(char n) {
  char d[] = "0123456789ABCDEF";
  char hi4 = n >> 4;
  char lo4 = n - hi4;
  pc(d[hi4]);
  pc(d[lo4]);
}
probably because you bitshift signed char


why xxd gives this weird output sometimes?
  find the exact input for which it gives it
solved!
  it was caused by bit-shifting signed integers
  

test PB for the whole range of possible inputs
ok, so it was problem with signed chars
  what happens if you bitshift signed numbers
  especially negative numbers?


==================================================
;C LANGUAGE

so "-" has higher precedence than "<<"
  rly?
    this gives different results:
      char lo4 = n - (hi4 << 4);
      char lo4 = n - hi4 << 4;
    if they were not, they would be equal
      why?
        l8r



==================================================
;MAN

man search with -I



==================================================
;HUNKS OF TEXT

tangent: (about string-printing functions)
how about using them as a base for stdout printing funcitons?
  but you'd have to create a buffer
in lisp you'd write a macro
  isn't it too voodoo?
  but it sounds like a great task for macro
or you can do it with a function pointer that either prints to string
or to stdout
  but that would require making a closure with the string as argument
    can't you do that?
  simpler way
    use a bunch of ifs
    pass a flag and a buffer arg
    make it a hidden function
    make exposed functions with less args
      is this some kind of known pattern?
        don't know of any name
        will have to call it somehow
      is this currying?
        nope
          rly?
          then try to do it
          maybe you can do it witout closures
          a sidequest - how much functional code
          can you write without heap allocation
            or stack tricks that simulate it
            what stack tricks?
              allocating an explicit stack of 
            this is silly
            Is this possible by standard?
              is dynamic stack allocation possible by standard?
              I remember being suprised about it 
                was it c++?
      it's a static closure
        eeh, that's too inspecific
          or maybe too ???
          focusing on "how it does stuff" instead of "what for"
          focusing on internals rather than purpose
        I'd like to have a pragmatic name
      adapter?



==================================================
;C RUNTIME

inline funcitons in standard c?
if they really work, you shouldn't be able to recurse them
  linker error!
  it actually complies
    wait, warnings supressed
      it has no warning even with Wall!



==================================================
;LISP

lisp interpreter for safer and more powerful programming
  safer
    no seggies
  more powerful
    proper macros

lisp without GC?
  no eval inside
  each eval clears the heap
usage?
  a shell?
    for stuff like mon
      for supporting complex arguments
      but implementation is completely in c

can later make a lisp with abc gc
  but maybe inside the vm

how about eval being in a throw-away heap
but you can explicitly allocate to persistant heap
how to call this memory management scheme?

everything that the eval produces
which doesn't end up saved somewhere
is garbage

where does the result go?
  nowhere, it just gets printed, then the repl loops
  it gets printed from the transient heap


types inside that lisp?
  sure doozie
  but first do them in c



==================================================
;MATH

(n / a + m / a) != (n + m) / a?
prove it
  degenerate case
  1 / 2 + 1 / 2 = 0
  (1 + 1) / 2 = 1
QED


==================================================
;VM

does the vm have interrupts?
first try without


==================================================
;NOTSURE

weird dynamic allocation
  what for?

/*
enum DynType {
  INT,
  DINT, //???
}
//^don't you need dynamic allocation for that?


typedef struct {
  int v;
  int t;
} Dint;

union {
}
*/


maybe I can write the lisp before the dynamic array and all
  well you can, but should you?



==================================================
;OUT

hacker game where you are walking literally inside
vm that runs you
can it be made into mmorpg?
  what about griefing
    that's the part of fun
    you get ungriefed spawn points
    you are int your little room
    but there are hundreds of people in your address space
    physical space doesn't matter as much
    you can turn it into anything you like
    you can turn your display into anything you like
    it's just mapped to you in the address space
    and arbitrary space is rwx
    you die when your thread crashes
  client input is just a write to a specific address 
    you get your address at random
      maybe with some overlap avoidance between players
    the whole framebuffer gets sent to you on each update
      how large it is?


==================================================
;IN

lambda calculus?

graphics

print bits for long?
  hey, you can do it for many functions that you wrote so far

I like low-level programming
but I don't like low-level interfaces

cons a b
atom type b

how about making them equal length

or instead of using flags to check if something is atomic
using the "type" pointer
but then, the type pointer for cons cells needs to be well defined before you start consing
  you can just pick the start of the heap
but top of the structure gets consed last
so you can do it with an explicit write, right?
  kida finicky but it would work
  and the gc and consp only have to check if the address is alright

type properties
fixed size
dynamic size
if it's dynamic size, you blah blah


I can now look how structs look like in memory

hey, maybe canvas looks bgr because of endianness
what if I used a struct?

alloc viewer
  visualizing arbitrary datastructures

how about atoms that store stuff
  vibes well with this "permanent storage"

lispy shell
but nothing gets defined in lisp
lisp serves only as a structure for composing expresions

vm
  segfaults impossible
  can do multithreading
  can generate/modify code
    this can be done with normal interpreter as well

how about giving the interpreter a stack but not letting it cons

what function call actually does
what happens if I miscast a function pointer
to a function pointer with
  1 argument more?
  1 argument less?

lisp
  "context is consed on the call stack"
    does it even make sense?
      it does if it's only one cons cell
  "return values are consed on call stack"
    it can work, there's only one return value

what about arguments?
what if you do calloc
what does it do?
you don't have calloc
but can you fake it?
  you can't because you can't modify your registers
  because that requires asm
  and I don't want to deal with other people's ISAs

load a file?
it would be convenient to w

single rom file
  how would it work?

how to see if the malloc works?

IO streams abstraction?
  reading char** lines


gfx
  anti-aliased ascii lines


can do 3d l system plants and more
scorpions
where does it belong?
  todo?
  some place for ideas?

parsing procedures that mutate a string pointer

testing
I have no asserts



error handling

methodology
what looks like a solution
what actually solves the problem
the more you know about the problem
the simpler your solutions


how much memory do you need to print a bignum?
how many digit does this number have?

can you print an int without recursion?

how calloc is implemented

where should it go
  outside of the garden

how do you get it there


what's cross platform anyway
why would I want it?
I'm gonna run it on this machine only, probably
but I don't wanna learn x86 assembly
but you have an x86 machine
alternatively you can 


the art of doing stupid
  the thing I did with vdom
"what's the dumbest way to solve the problem?"
  least sophisticated

disambiguating "simple"
  low complexity
  easy to do stuff


the nuance here is
intelligence and knowledge can 

if those notes fell into the trash can
what would I extract

if it isn't a little bit misorganized,
you spend too much time ordering it


2d flight simulator thingy

term fps
maybe I should get a better term
no, but you're using a ???

maybe a turn based sailing game
a roguelike
you type in commands
you give orders
you're the captain!
how about real time but command based

xxd byte numbering
how many digits should it be?
  depending on the hexdump length?
  but constant
how does normal xxd implement it


casting to a smaller type?
  least significant bytes


xxd non-empty


interesting thing when you dump callstack
but why does it segfault in the middle of meaningful text?

idea
  extracting env variables
  what for?
    for the lulz?

checking if you can execute code in constants space

checking if functions are defined in the same block as
global constants






char a[] = "asdfghjk";
int foo() {
  return 1;
}
char b[] = "zxcvbnmm";


U4 main() {
  xxd(a-0x50, 0xA0);
}

what are those weird bytes that change each time I run them
  they're always in the same place

